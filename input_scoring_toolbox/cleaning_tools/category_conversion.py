#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Thu Aug  5 15:15:43 2021@author: roandufeu"""import pandas as pdfrom input_scoring_toolbox.loading_tools.sharepoint_loader.sp_loader import SPLoaderdef cast_flags(x):    """    Changes True/False to 1/0    Args:        x (bool): Row in df with True and False values    Returns:        Pandas Series: Row with 1's and 0's    """    if pd.notnull(x):        x_int = int(x)    else:        x_int = ""    return x_intdef cast_categorical(data_df: pd.DataFrame, columns:list = None, conversion_dict: dict = None,                      sharepoint_path_sheet: list = ['Data/gold standards (WIP)/2021_10_11 Categorical conversion.xlsx','Categorical conversion']):    """    Converts text responses to numeric responses as specified by a dictionary.     If no dictionary is provided, the path and sheetname to a sharepoint excel may be provided instead.    If no sharepoint_path is provided, default to esg module binary conversion     in 2021_10_11 Categorical conversion.xlsx.        User may specify columns to convert. If not specified, all columns are converted.    Args:        data_df (pd.Dataframe): dataframe with values to convert        columns (list): df columns to cast (if none then cast all)        conversion_dict (dict): conversion dictioinary to apply to df        sharepoint_path_sheet (list): sharepoint filepath and sheetname for excel containing conversion_dict            Returns:        Pandas Dataframe: Converted dictionary    """    data_converted = data_df.copy()        if not conversion_dict:        # get fetcher that allows fetching excel from sharepoint        sharepoint_fetcher = SPLoader()        conversion_df = sharepoint_fetcher.get_excel(sharepoint_path_sheet[0], sheet_name = sharepoint_path_sheet[1])        conversion_dict = conversion_df.set_index('Raw answer')['Value'].to_dict()         if columns:        data_converted[columns] = data_converted[columns].replace(conversion_dict)                data_converted[columns] = data_converted[columns].replace({'None':None})    else:        data_converted = data_converted.replace(conversion_dict)                data_converted = data_converted.replace({'None':None})        return data_converted